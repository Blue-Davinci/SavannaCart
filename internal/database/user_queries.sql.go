// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package database

import (
	"context"
	"time"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (
    first_name,
    last_name,
    email,
    profile_avatar_url,
    password,
    oidc_sub,
    role_level,
    activated
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
 RETURNING id, role_level, version, created_at, updated_at, last_login
`

type CreateNewUserParams struct {
	FirstName        string
	LastName         string
	Email            string
	ProfileAvatarUrl string
	Password         []byte
	OidcSub          string
	RoleLevel        string
	Activated        bool
}

type CreateNewUserRow struct {
	ID        int64
	RoleLevel string
	Version   int32
	CreatedAt time.Time
	UpdatedAt time.Time
	LastLogin time.Time
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ProfileAvatarUrl,
		arg.Password,
		arg.OidcSub,
		arg.RoleLevel,
		arg.Activated,
	)
	var i CreateNewUserRow
	err := row.Scan(
		&i.ID,
		&i.RoleLevel,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    first_name,
    last_name,
    email,
    profile_avatar_url,
    password,
    oidc_sub,
    role_level,
    activated,
    version,
    created_at,
    updated_at,
    last_login
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ProfileAvatarUrl,
		&i.Password,
		&i.OidcSub,
		&i.RoleLevel,
		&i.Activated,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}
