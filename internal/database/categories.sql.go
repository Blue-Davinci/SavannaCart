// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name,
    parent_id
) VALUES ($1, $2)
RETURNING id, name, parent_id, version, created_at, updated_at
`

type CreateCategoryParams struct {
	Name     string
	ParentID sql.NullInt32
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.ParentID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT count(*) OVER() AS total_count,
    id,
    name,
    parent_id,
    version,
    created_at,
    updated_at
FROM categories
WHERE ($1 = '' OR to_tsvector('simple', name) @@ plainto_tsquery('simple', $1))
ORDER BY name
LIMIT $2 OFFSET $3
`

type GetAllCategoriesParams struct {
	Column1 interface{}
	Limit   int32
	Offset  int32
}

type GetAllCategoriesRow struct {
	TotalCount int64
	ID         int32
	Name       string
	ParentID   sql.NullInt32
	Version    int32
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) GetAllCategories(ctx context.Context, arg GetAllCategoriesParams) ([]GetAllCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCategoriesRow
	for rows.Next() {
		var i GetAllCategoriesRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = $2,
    parent_id = $3,
    version = version + 1,
    updated_at = NOW()
WHERE id = $1 AND version = $4
RETURNING name, parent_id, version, updated_at
`

type UpdateCategoryParams struct {
	ID       int32
	Name     string
	ParentID sql.NullInt32
	Version  int32
}

type UpdateCategoryRow struct {
	Name      string
	ParentID  sql.NullInt32
	Version   int32
	UpdatedAt time.Time
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (UpdateCategoryRow, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.Version,
	)
	var i UpdateCategoryRow
	err := row.Scan(
		&i.Name,
		&i.ParentID,
		&i.Version,
		&i.UpdatedAt,
	)
	return i, err
}
